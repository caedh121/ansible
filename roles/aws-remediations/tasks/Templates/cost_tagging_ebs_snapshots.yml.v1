- name: Get list of  instances with attached  volumes
  ec2_instance_info:
    region: "{{region}}"
  register: ec2_list

- debug:
    msg: "{{ item.instance_id  }} -- {{ item.tags.Customer  }} -- {{ item | json_query ('block_device_mappings[2].ebs.volume_id') }}"
  with_items: "{{ ec2_list | json_query ('instances[*]') }}"


- name: Tag the volumes 0
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[0].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 1
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[1].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 2
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[2].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 3
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[3].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 4
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[4].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 5
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[5].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- name: Tag the volumes 6 
  ec2_tag:
    region: "{{region}}"
    purge_tags: no
    resource: "{{ item | json_query ('block_device_mappings[6].ebs.volume_id') }}"
    state: present
    tags:
      Name: "{{ item.tags.Name  }}"
      Customer: "{{ item.tags.Customer }}"
      Environment: "{{ item.tags.Environment }}"
      Taggedby: Ansible
  with_items: "{{ ec2_list | json_query ('instances[*]') | default([]) }}"
  ignore_errors: yes

- debug:
    msg: ["{{instance_state | json_query ('results[*].instances[*].tags.Customer') | unique }}",
          "{{instance_state | json_query ('results[*].instances[*].instance_id') | unique }}",
          "{{instance_state | json_query ('results[*].instances[*].block_device_mappings[*].ebs.volume_id') | unique }}"]



- name: Start stopped instances with attached volumes
  ec2_instance:
    region: "{{region1}}"
    state: running
    wait: yes
    wait_timeout: 36000
    instance_ids: "{{ item.instance_id }}"
  with_items: "{{ instance_state | json_query ('results[*].instances[*]') | unique |default([]) }}"


- name: Start instances that were running
  ec2_instance:
    region: "{{region}}"
    state: running                          
    wait: yes
    wait_timeout: 36000
    instance_ids: "{{ item }}"
  with_items: "{{ instance_state | json_query ('results[*].instances[*].instance_id') | unique |default([]) }}"



- name: Get list of instances 
  ec2_instance_info:
    region: "{{region1}}"
  register: instance_info

- debug:
    msg: "{{instance_info.instances | length}}"


